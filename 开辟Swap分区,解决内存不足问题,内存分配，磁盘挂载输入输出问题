一、前言

在用kettle的rest client控件发送http请求调用java接口时遇到内存不足的问题，如下
Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00007f6bedbe0000, 65536, 1) failed; error='无法分配内存' (errno=12)
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 65536 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/dap/apache-tomcat-8.5.23/bin/hs_err_pid4597.log
#
# Compiler replay data is saved as:
那么遇到此类问题该如何解决呢？

二、开辟Swap分区

Windows内存不足，可以直接开虚拟分区。Linux也是相似的道理。Linux下跑程序的时候，如果内存不足了，那么程序会使用swap分区，我们无法轻易更改内存大小，但是swap分区是可控的，所以可以从这里下手。

1.内存查看：

我们可以使用如下指令查看内存和Swap分区的使用情况：
free -h
————————————————————————————————————————————————————————————————————————————————
               total        used        free      shared  buff/cache   available
Mem:           7.6G        3.1G        259M        196M        4.2G        4.0G
Swap:          0           0           0 
————————————————————————————————————————————————————————————————————————————————
由此可见Swap分区大小为0，创建Swap分区后
free -h
————————————————————————————————————————————————————————————————————————————————
               total        used        free      shared  buff/cache   available
Mem:           7.6G        3.1G        259M        196M        4.2G        4.0G
Swap:          7.9G        22M         7.9G 
————————————————————————————————————————————————————————————————————————————————
注：如果Swap对应的userd值一直发生变化，且值越大，说明严重缺内存

2.使用硬盘创建

如果我们的硬盘空间够用，那么就可以使用硬盘创建我们的分区。

创建分区文件，大小为1G，步骤如下：

cd /DISKB
mkdir swap-file
cd swap-file/
dd if=/dev/zero of=/DISKB/swap-file/swapfile bs=1M count=1024000

生成 swap 文件系统：
mkswap ./swapfile
	
激活 swap 文件：
swapon ./swapfile


这样，我们就实现了临时挂在swap分区，如果想重启的时候也自动挂在swap分区，可以修改/etc/fstab文件，添加内容如下：
/DISKB/swap-file/swapfile/swapfile          swap            swap    defaults        0 0


这样每次重启系统的时候就会自动加载 swap 文件了

查看有没有创建swap文件
cat /proc/swaps




ls: 读取目录 .: 输入/输出错误 错误处理



1，推测原因：磁盘老化导致坏道，异常操作导致文件node错乱、文件损坏等
2，修复方法：软件修复，单不能保证修复所有的错误。修复后如果一段时间内再次发生，请考虑磁盘质量问题。


修复过程:
1, df -TH #记录目标磁盘的类型，如ext2、ext3.记录挂在盘和挂在目录。如:/dev/sda3 /disk3
2, umount /dev/sda3  #取消挂载，如提示设备忙，请执行:  fuser -km /dev/sda3
3, fsck -t ext2 -y /dev/sda3#修复。"ext2"是第一步查看的磁盘类型。
4, mount /dev/sda3 /disk3/  #完成挂载
5, reboot #建议重启。



linux下overcommit_memory的问题

公司的redis有时background save db不成功，通过log发现下面的告警，很可能由它引起的：

[13223] 17 Mar 13:18:02.207 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.

于是通过搜索，也有人跟我遇到同样的问题，基本可以确定是由它引起的。

内核参数overcommit_memory 

它是 内存分配策略

可选值：0、1、2。
0， 表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程。
1， 表示内核允许分配所有的物理内存，而不管当前的内存状态如何。
2， 表示内核允许分配超过所有物理内存和交换空间总和的内存

什么是Overcommit和OOM

    Linux对大部分申请内存的请求都回复"yes"，以便能跑更多更大的程序。因为申请内存后，并不会马上使用内存。这种技术叫做Overcommit。当linux发现内存不足时，会发生OOM killer(OOM=out-of-memory)。它会选择杀死一些进程(用户态进程，不是内核线程)，以便释放内存。

    当oom-killer发生时，linux会选择杀死哪些进程？选择进程的函数是oom_badness函数(在mm/oom_kill.c中)，该函数会计算每个进程的点数(0~1000)。点数越高，这个进程越有可能被杀死。每个进程的点数跟oom_score_adj有关，而且oom_score_adj可以被设置(-1000最低，1000最高)。

解决方法：

     很简单，按提示的操作（将vm.overcommit_memory 设为1）即可：

     有三种方式修改内核参数，但要有root权限：

   （1）编辑/etc/sysctl.conf ，改vm.overcommit_memory=1，然后sysctl -p 使配置文件生效

  （2）sysctl vm.overcommit_memory=1

  （3）echo 1 > /proc/sys/vm/overcommit_memory





第二篇文章


有两台新配的服务器内存128G,但在空余内存还有20G,page cache 60G时jps启动不了，提示java heap space,c中调用malloc无法分配5G以上的内存，很奇怪。

倒是在网上有看到显卡没装风尚导致该问题的,最后换了一个带风扇的显卡就解决的:

 http://ubuntuforums.org/showthread.php?p=11649751

后来同事问了运帷，原来时系统参数overcommit_memory和overcommit_ratio搞的鬼。

grep -i commit /proc/meminfo

看到CommitLimit和Committed_As参数。

CommitLimit是一个内存分配上限,CommitLimit = 物理内存 * overcommit_ratio(默认50，即50%) + swap大小

Committed_As是已经分配的内存大小。

overcommit_memory参数就是控制分配内存是否可以超过CommitLimit，默认是0,即启发式的overcommitting handle,会尽量减少swap的使用,root可以分配比一般用户略多的内存。1表示允许超过CommitLimit,2表示不允许超过CommitLimit。

原来这种怀疑系统参数有问题的诊断一般就是比较和正常机器的sysctl.conf配置，下次要先比较避免武断下结论。。




