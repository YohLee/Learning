https://github.com/lijin-THU/notes-python
http://nbviewer.jupyter.org/github/lijin-THU/notes-python/blob/master/index.ipynb
https://www.zhihu.com/question/49909565          ---tensorflow

从哪里查找最新的学习资料？

    http://www.gitxiv.com/，不仅能找到最新论文，还能找到所需要的代码。

    http://www.arxiv-sanity.com/

    https://arxiv.org/, https://stackoverflow.com
    
    
https://segmentfault.com/a/1190000009467193                   ----------机器学习 - 收藏集 - 掘金







from datetime import datetime
import json
import uuid
import csv
heads = ["_id","accessId","band","cellId","createTime","csRegStatus","downMbr","extSoftwareVersion","hostSoftwareVersion","imei","imeiAccessId","lac","latitude","longitude","machineIdentifier","mcc","mnc","mvnoId","orgId","processIdentifier","psRegStatus","rat","rebootTimes","rssi","sessionId","sigQuality","sigStrength","ssimIccid","ssimImsi","ssimIp","succTime","terType","time","timeSecond","timestamp","transTimes","type","uploadTime","upMbr","userName"]
print("Head Length:" + heads.__len__().__str__() + ", Head Column:" + heads.__str__())

# Need Write CSV File
csv_file = open("/uCloudlinkSSD/tf/2017/merge.csv", "a", newline="")
writer = csv.writer(csv_file)

# Write Data Heads To CSV File
writer.writerow(heads)

# Need Read TXT File
txt_file = open("/uCloudlinkSSD/tf/2017/merge.json", "r", encoding="utf-8")
line = txt_file.readline()
row = {}
print("Write CSV File Begin:", datetime.now().__str__())
while line:
    json_data = json.loads(line)
    _id = uuid.uuid1()
    json_data["_id"] = _id.__str__()
    keys = list(json_data.keys())
    data=[]
    for key in heads:
        if key in keys:
            data.append(json_data[key])
        else:
            data.append("")            
    writer.writerow(data)  # Write Data To CSV File
    line = txt_file.readline()
print("Write CSV File End:", datetime.now().__str__())
txt_file.close()
csv_file.close()















import requests
import pymysql
import datetime
import time


class Dap():
    def __init__(self):
        self.tablename = 'dap_auto_test_log'
        self.url_prefix = "https://bigdataplatform.ucloudlink.com"

    def initMysql(self):
        self.db = pymysql.connect(host='127.0.0.1', user='root', passwd='root', db='test', charset='utf8')
        self.cur = self.db.cursor()
        self.cur.execute('USE test')

    def readTopUrl(self,url):

        try:
            fo = open(url, "r+")
            topUrlList=[]
            print("文件名为: ", fo.name)
            for line in fo.readlines():  # 依次读取每行
                line = line.strip()  # 去掉每行头尾空白
                topUrlList.append(line)
            fo.close()
        except Exception as e:
            print("readTopUrl Exception:", e)
        return topUrlList

    def login(self):
        response = requests.post('https://bigdataplatform.ucloudlink.com/dap/loginController.do?checkuser', data={'userName': 'renchangcun','password': '!QAZ2wsx','randCode': '','langCode': '','orgId': ''})
        print(response.text)
        cookies = response.cookies
        jsession_id = cookies["JSESSIONID"]
        return jsession_id

    def runEachUrl(self,url,cookies):
        resultDict={}
        remark=''
        yesterday = datetime.date.today() - datetime.timedelta(days=1)
        endTime =yesterday.__str__()+" 23:59:59"
        session=requests.session()
        begin = time.time()
        responses = session.post(url, data={'createtime_begin':yesterday.__str__(),'createtime_end':endTime,'page':1,'rows': 10},cookies=cookies)
        end=time.time();
        statusCode=responses.status_code
        print('statusCode:'+str(statusCode))
        total = 0
        if statusCode==200:
            try:
                response_data = responses.json()
                total = response_data['total']
            except Exception as e:
                print('responses.json() error',e)
        else:
         remark=responses.text
        resultDict['url'] = url.replace(self.url_prefix,"")
        resultDict['request_time'] = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        resultDict['request_param'] = 'createtime_begin:'+yesterday.__str__()+' createtime_end:'+endTime
        resultDict['status_code'] = statusCode
        resultDict['total_row'] = total
        resultDict['cost_time'] = end-begin
        resultDict['remark'] = remark
        return resultDict

    def insertLog2Mysql(self,resultDict):
        url=resultDict['url']
        request_time = resultDict['request_time']
        request_param = resultDict['request_param']
        status_code = resultDict['status_code']
        total_row = resultDict['total_row']
        cost_time = resultDict['cost_time']
        remark = resultDict['remark']
        self.cur.execute('INSERT INTO '+self.tablename+' (url,request_time, request_param, status_code, total_row,cost_time,remark) VALUES (%s, %s, %s, %s,%s,%s,%s)', (url,request_time, request_param, status_code, total_row,cost_time,remark))
        self.cur.connection.commit()

if __name__ == '__main__':
    dap = Dap()
    dap.initMysql()
    topUrlList=dap.readTopUrl("E:\\python\\Python-Spider-master\\dengws\\bigDataTop20.txt")
    jsession_id=dap.login()
    cookies = {"JSESSIONID": jsession_id}

    for url_suffix in topUrlList:
        url=dap.url_prefix+url_suffix
        resultDict=dap.runEachUrl(url,cookies)
        print(resultDict)
        dap.insertLog2Mysql(resultDict)
        
        
        
        
        
        
        
        
import requests
import datetime
import csv


def login():
    jsession_id = None
    try:
        user_name = "renchangcun"
        password = "!QAZ2wsx"
        login_url = "https://bigdataplatform.ucloudlink.com/dap/loginController.do?checkuser" \
                    "&userName=" + user_name + "&password=" + password + "&randCode=&langCode=zh-cn&orgId="
        responses = requests.post(login_url)
        cookies = responses.cookies
        jsession_id = cookies["JSESSIONID"]
    except Exception as e:
        print("User Login Exception:", e)
    return jsession_id


def get_url_config():
    url_config_file = None
    url_conf = []
    try:
        url_config_file = open("D:\\data\\url.conf", "r", encoding="utf-8")
        next(url_config_file)
        for line in url_config_file:
            conf_dict = {}
            line = line.replace("\n", "")
            conf_list = line.split(",")
            conf_dict["name"] = conf_list[0]
            conf_dict["url"] = conf_list[1]
            conf_dict["type"] = conf_list[2]
            conf_dict["beginTime"] = conf_list[3]
            conf_dict["endTime"] = conf_list[4]
            conf_dict["total"] = conf_list[5]
            url_conf.append(conf_dict)
    except Exception as e:
        print("Get Url Conf Exception:", e)
    finally:
        url_config_file.close()
    return url_conf


def judge_data_exit():
    results = []
    url_conf_data = get_url_config()
    if len(url_conf_data) > 0:
        jsession_id = login()
        if not jsession_id:
            print("User Login Failure!")
        cookies = {"JSESSIONID": jsession_id}
        session = requests.session()
        for url_data in url_conf_data:
            try:
                name = url_data["name"]
                url = url_data["url"]
                begin_time = url_data["beginTime"]
                end_time = url_data["endTime"]

                yesterday = datetime.date.today() - datetime.timedelta(days=1)
                url = url + "&" + begin_time + "=" + yesterday.__str__() + "&" + end_time + "=" + yesterday.__str__()

                responses = session.post(url, cookies=cookies)

                response_data = responses.json()
                total_name = url_data["total"]
                total = int(response_data[total_name])

                result = []
                if total > 0:
                    result.append(name)
                    result.append("Y")
                else:
                    result.append(name)
                    result.append("N")
                results.append(result)
            except Exception as e:
                print("Request URL Data Exception:", e)
    else:
        print("Url Conf File Content Is Null!")
    return results


def write_judge_result():
    file_name = datetime.datetime.now().strftime('%Y%m%d%H%M%S')
    results = judge_data_exit()
    result_file = open("D:\\data\\" + file_name + ".csv", "a", encoding="gbk", newline="")
    writer = csv.writer(result_file)
    header = ["name", "is not null"]
    writer.writerow(header)
    writer.writerows(results)


if __name__ == "__main__":
    print("Judge Result Data Bengin:", datetime.datetime.now())
    write_judge_result()
    print("Judge Result Data Bengin:", datetime.datetime.now())
