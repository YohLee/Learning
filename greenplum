##########################GREENPLUM######################################################################################################################################################################################
ALTER TABLE ods.ods_ocs_flowdetail DROP PARTITION IF EXISTS ods_ocs_flowdetail_p20180906;  	   	  
ALTER TABLE ods.ods_ocs_flowdetail ADD PARTITION ods_ocs_flowdetail_p20180906 START ('2018-09-06'::date) END ('2018-09-07'::date) WITH (tablename='ods_ocs_flowdetail_p20180906', orientation=row ,appendonly=true,compresslevel=5);
enable_hashjoin=true，enable_nestloop=false，enable_mergejoin=false来试图强制使用Hash Join，但是失败了。

通过标准输入输出实现Greenplum文件导入导出
-----导出
psql -h 192.168.0.1 -U gpadmin bigdata -c "copy(select * from src.dis_geocoding_celllocation) to STDOUT;" >/root/dis_geocoding_celllocation.txt
-----导入
cat /mytemp/test.txt |psql -h 192.168.0.1 -U gpadmin bigdata -c 'copy src.dis_geocoding_celllocation from stdin;'


psql -h 11.74.5.16 -U gpadmin bigdata -c "copy(select * from ods.ods_oss_perflog_t_term_big_cycle where createdate <'2018-04-01 00:00:00'::timestamp) to STDOUT with csv header;" > /uCloudlinkSSD/dumpdata/data_bak/oss_perflog/ods_oss_perflog_t_term_big_cycle.csv 

COPY src.src_oss_perflog_t_term_vsim_estfail(sigStrength,latitude,createTime,userName,rat,errorTime,terType,longitude,csRegStatus,vsimImsi,rssi,imei,_id,transTimes,mcc,downMbr,mvnoId,sessionId,imeiAccessId,accessId,upMbr,mnc,
errCode,orgId,sigQuality,lac,cellId,uploadTime,psRegStatus,errType,band) FROM '/home/t_term_vsim_estfail.csv' DELIMITER ',' CSV HEADER;

select * from pg_indexes where tablename like 'dm_trmnl_acc_kpi_all_hour%';

select * from pg_class where relname like 'idx_dm_trmnl_acc_kpi_all_hour%'

分割分区
ALTER TABLE ods.ods_oss_perflog_t_term_ssim_estsucc SPLIT PARTITION FOR ('2017-05-01')
AT ('2017-06-01')
INTO (PARTITION t_term_ssim_estsucc_201705, PARTITION t_term_ssim_estsucc_20170601);
ALTER TABLE ods.ods_oss_perflog_t_term_ssim_estsucc SPLIT PARTITION FOR ('2019-11-01')
AT ('2019-12-01')
INTO (PARTITION "201911", PARTITION "201912");
分区重命名
ALTER TABLE ods.ods_oss_perflog_t_term_ssim_estsucc RENAME PARTITION FOR ('2018-12-01') TO "201812" ;
创建default分区
ALTER TABLE ods.ods_oss_perflog_t_term_ssim_estsucc ADD DEFAULT PARTITION other;
增加表分区 
ALTER TABLE table_name   ADD PARTITION P20091001  START (DATE '2009-10-01') INCLUSIVE END (DATE '2009-10-02')  EXCLUSIVE WITH(appendonly=true,compresslevel=5);

从一个字段里删除一个非空约束：

ALTER TABLE distributors ALTER COLUMN street DROP NOT NULL;


root 用户切换到 gpadmin 用户

psql -d bigdata

\d+ ods.ods_oss_perflog_t_term_vsim_reestsucc;
\timing
\h create index




ALTER TABLE ods.ods_ocs_flowdetail DROP PARTITION IF EXISTS ods_ocs_flowdetail_p20180906;  	   	  
ALTER TABLE ods.ods_ocs_flowdetail ADD PARTITION ods_ocs_flowdetail_p20180906 START ('2018-09-06'::date) END ('2018-09-07'::date) WITH (tablename='ods_ocs_flowdetail_p20180906', orientation=row ,appendonly=true,compresslevel=5);

CREATE TABLE ods.ods_ocs_flowdetail (
_id varchar(50),
accountid varchar(50),
accounttype varchar(50),
flowid varchar(50),
customerid varchar(50),
assigncardid varchar(50),
businesssizeup float8,
businesssizedown float8,
pkname varchar(100),
starttime float8,
endtime float8,
mvnocode varchar(50),
createtime date,
loaddate timestamp DEFAULT now()
) WITH (appendonly=true, compresslevel=5) DISTRIBUTED BY (_id) PARTITION BY RANGE(createtime)
       (
	PARTITION ods_ocs_flowdetail_p2018before START ('2010-01-01'::date) END ('2018-01-01'::date) WITH (tablename='ods_ocs_flowdetail_p2018before', orientation=row ,appendonly=true,compresslevel=5),
	PARTITION ods_ocs_flowdetail_p20180901 START ('2018-09-01'::date) END ('2018-09-02'::date) WITH (tablename='ods_ocs_flowdetail_p20180901', orientation=row ,appendonly=true,compresslevel=5),
	PARTITION ods_ocs_flowdetail_p20180902 START ('2018-09-02'::date) END ('2018-09-03'::date) WITH (tablename='ods_ocs_flowdetail_p20180902', orientation=row ,appendonly=true,compresslevel=5),	
	PARTITION ods_ocs_flowdetail_p20180903 START ('2018-09-03'::date) END ('2018-09-04'::date) WITH (tablename='ods_ocs_flowdetail_p20180903', orientation=row ,appendonly=true,compresslevel=5),	
	PARTITION ods_ocs_flowdetail_p20180904 START ('2018-09-04'::date) END ('2018-09-05'::date) WITH (tablename='ods_ocs_flowdetail_p20180904', orientation=row ,appendonly=true,compresslevel=5),
	PARTITION ods_ocs_flowdetail_p20180905 START ('2018-09-05'::date) END ('2018-09-06'::date) WITH (tablename='ods_ocs_flowdetail_p20180905', orientation=row ,appendonly=true,compresslevel=5),
	PARTITION ods_ocs_flowdetail_p20180906 START ('2018-09-06'::date) END ('2018-09-07'::date) WITH (tablename='ods_ocs_flowdetail_p20180906', orientation=row ,appendonly=true,compresslevel=5)
       );

CREATE TABLE "ods"."ods_oss_system_t_speed_detectresult" (
"_id" varchar(120),
"acttype" numeric(20,4),
"createtime" date,
"downloadbyte" numeric(20,4),
"downloadtime" numeric(20,4),
"imei" varchar(256),
"imsi" varchar(256),
"lac" numeric(20,4),
"plmn" varchar(256),
"rat" numeric(20,4),
"sessionid" varchar(256),
"starttype" numeric(20,4),
"state" varchar(256),
"strength" numeric(20,4),
"uploadtime" numeric(32,4),
"url" varchar(256),
"usercode" varchar(256),
"loaddate" timestamp DEFAULT now()
)
WITH (appendonly=true, compresslevel=5) DISTRIBUTED BY (_id) PARTITION BY RANGE(createtime)
       (
    PARTITION ods_oss_system_t_speed_detectresult_p201801 START ('2010-01-01'::date) END ('2018-02-01'::date) WITH (tablename='ods_oss_system_t_speed_detectresult_p201801', orientation=row ,appendonly=true,compresslevel=5),
	PARTITION ods_oss_system_t_speed_detectresult_p201802 START ('2018-02-01'::date) END ('2018-03-01'::date) WITH (tablename='ods_oss_system_t_speed_detectresult_p201802', orientation=row ,appendonly=true,compresslevel=5),
	PARTITION ods_oss_system_t_speed_detectresult_p201803 START ('2018-03-01'::date) END ('2018-04-01'::date) WITH (tablename='ods_oss_system_t_speed_detectresult_p201803', orientation=row ,appendonly=true,compresslevel=5),	
	PARTITION ods_oss_system_t_speed_detectresult_p201804 START ('2018-04-01'::date) END ('2018-05-01'::date) WITH (tablename='ods_oss_system_t_speed_detectresult_p201804', orientation=row ,appendonly=true,compresslevel=5),
	PARTITION ods_oss_system_t_speed_detectresult_p201805 START ('2018-05-01'::date) END ('2018-06-01'::date) WITH (tablename='ods_oss_system_t_speed_detectresult_p201805', orientation=row ,appendonly=true,compresslevel=5),
	PARTITION ods_oss_system_t_speed_detectresult_p201806 START ('2018-06-01'::date) END ('2018-07-01'::date) WITH (tablename='ods_oss_system_t_speed_detectresult_p201806', orientation=row ,appendonly=true,compresslevel=5),
	PARTITION ods_oss_system_t_speed_detectresult_p201807 START ('2018-07-01'::date) END ('2018-08-01'::date) WITH (tablename='ods_oss_system_t_speed_detectresult_p201807', orientation=row ,appendonly=true,compresslevel=5),
	PARTITION ods_oss_system_t_speed_detectresult_p201808 START ('2018-08-01'::date) END ('2018-09-01'::date) WITH (tablename='ods_oss_system_t_speed_detectresult_p201808', orientation=row ,appendonly=true,compresslevel=5),
	PARTITION ods_oss_system_t_speed_detectresult_p201809 START ('2018-09-01'::date) END ('2018-10-01'::date) WITH (tablename='ods_oss_system_t_speed_detectresult_p201809', orientation=row ,appendonly=true,compresslevel=5),
	PARTITION ods_oss_system_t_speed_detectresult_p201810 START ('2018-10-01'::date) END ('2018-11-01'::date) WITH (tablename='ods_oss_system_t_speed_detectresult_p201810', orientation=row ,appendonly=true,compresslevel=5),	
	PARTITION ods_oss_system_t_speed_detectresult_p201811 START ('2018-11-01'::date) END ('2018-12-01'::date) WITH (tablename='ods_oss_system_t_speed_detectresult_p201811', orientation=row ,appendonly=true,compresslevel=5),		  
    PARTITION ods_oss_system_t_speed_detectresult_p201812 START ('2018-12-01'::date) END ('2019-01-01'::date) WITH (tablename='ods_oss_system_t_speed_detectresult_p201812', orientation=row ,appendonly=true,compresslevel=5)
       );
	
		  
		 
CREATE TABLE "ods"."ods_oss_system_t_terminal_flow_count_day" (
"_id" varchar(120),
"c_mvnoid" varchar(256),
"c_orgid" varchar(256),
"cardtotal" numeric(32,4),
"counttime" numeric(32,4),
"imei" numeric(32,4),
"imsi" varchar(256),
"iso2" varchar(256),
"t_mvnoid" varchar(256),
"t_orgid" varchar(256),
"total" numeric(32,4),
"u_mvnoid" varchar(256),
"u_orgid" varchar(256),
"usercode" varchar(256),
"usertotal" numeric(32,4),
"loaddate" timestamp DEFAULT now(),
"datetime" date
)
DISTRIBUTED BY (_id) PARTITION BY RANGE(datetime)
(START (TIMESTAMP '2018-01-01 00:00:00') INCLUSIVE END (TIMESTAMP '2020-01-01 00:00:00') EXCLUSIVE EVERY (INTERVAL '1 month'), DEFAULT PARTITION outlying_dates);




CREATE TABLE tb1_partition_list_yyyymmdd (
    id numeric,
    yyyymmdd character varying(128)
)
WITH (appendonly=true, compresslevel=5) DISTRIBUTED BY (id) PARTITION BY LIST(yyyymmdd)
          (
          PARTITION p_ods_flowdetail_DHI VALUES('DHI') WITH (tablename='ods_flowdetail_prt_DHI', orientation=row , appendonly=true, compresslevel=5),
          PARTITION p_ods_flowdetail_GLOBALWIFI VALUES('GLOBALWIFI') WITH (tablename='ods_flowdetail_prt_GLOBALWIFI', orientation=row , appendonly=true, compresslevel=5),
          PARTITION p_ods_flowdetail_GlocM VALUES('GlocM') WITH (tablename='ods_flowdetail_prt_GlocM', orientation=row , appendonly=true, compresslevel=5),
          PARTITION p_ods_flowdetail_JETFI VALUES('JETFI','KRCNK','TELESQUARE') WITH (tablename='ods_flowdetail_prt_JETFI', orientation=row , appendonly=true, compresslevel=5),
          PARTITION p_ods_flowdetail_VISONDATA VALUES('VISONDATA','U2CDomest','GlocalMeUS') WITH (tablename='ods_flowdetail_prt_VISONDATA', orientation=row , appendonly=true, compresslevel=5),
					default partition other
          );



	
	 
select date(to_timestamp(logindatetime/1000)), datetime from ods.ods_oss_system_t_monitor_term_history limit 1;
alter table ods.ods_oss_system_t_monitor_term_history add column datetime date;
update ods.ods_oss_system_t_monitor_term_history set datetime=date(to_timestamp(logindatetime/1000)); 
CREATE INDEX idx_t_monitor_term_history ON ods.ods_oss_system_t_monitor_term_history USING btree (datetime);


select date(to_timestamp(logindatetime/1000)) from ods.ods_oss_system_t_monitor_term_online limit 1;
alter table ods.ods_oss_system_t_monitor_term_online add column datetime date;
update ods.ods_oss_system_t_monitor_term_online set datetime=date(to_timestamp(logindatetime/1000));
CREATE INDEX idx_t_monitor_term_online ON ods.ods_oss_system_t_monitor_term_online USING btree (datetime);



select date(to_timestamp(uploaddate/1000)) from ods.ods_oss_system_t_terminal_limit_speed limit 1
alter table ods.ods_oss_system_t_terminal_limit_speed add column datetime date;
update ods.ods_oss_system_t_terminal_limit_speed set datetime=date(to_timestamp(uploaddate/1000));
CREATE INDEX idx_t_terminal_limit_speed ON ods.ods_oss_system_t_terminal_limit_speed USING btree (datetime);






set session enable_seqscan=false;
-----查看正在运行的 sql
SELECT datname,procpid,query_start, current_query,waiting,client_addr FROM pg_stat_activity WHERE current_query<>'<IDLE>' order by query_start DESC
-----取消或终端正在运行的sql
SELECT pg_cancel_backend(25234);
SELECT pg_terminate_backend(25234);

select * from pg_indexes where tablename='ods_oss_system_t_terminal_limit_speed'
select * from pg_partitions where tablename='ods_oss_system_t_terminal_limit_speed'



增加表分区 
ALTER TABLE table_name   ADD PARTITION P20091001  START (DATE '2009-10-01') INCLUSIVE END (DATE '2009-10-02')  EXCLUSIVE WITH(appendonly=true,compresslevel=5); 
  
修改列类型 
 ALTER TABLE table_name  ALTER COLUMN a TYPE varchar(2048); 
  
修改distributed 列 
 alter table table_name  set distributed by(column_1); 
 select gp_segment_id,count(*) from dw.dw_trmnl_vsim_acc group by gp_segment_id order by gp_segment_id
 
 跑一时间段的函数或过程
 select  array_agg(i::date)  from generate_series('2015-12-01'::date, '2015-12-30'::date, '1 day'::interval) as t(i)

查看表大小
select * from (
select schemaname  || '.' || tablename,pg_size_pretty(pg_relation_size( schemaname  || '.' || tablename)) as pg_size_pretty,substr(pg_size_pretty(pg_relation_size( schemaname  || '.' || tablename)),
length(pg_size_pretty(pg_relation_size( schemaname  || '.' || tablename)))-2,length(pg_size_pretty(pg_relation_size( schemaname  || '.' || tablename)))) category,btrim(pg_size_pretty(pg_relation_size( schemaname  || '.' || tablename)),'MB,kb,GB,bytes') countsize
from pg_tables t inner join pg_namespace d on t.schemaname=d.nspname  
where schemaname='ods' 
) aa where aa.pg_size_pretty is not null and aa.pg_size_pretty<>'0 bytes'
order by aa.category,aa.countsize desc

----------------计算周一的日期-----------
SELECT   to_char(CURRENT_DATE +cast(-1*(TO_NUMBER(to_char(CURRENT_DATE,'D'),'99')-2) ||' days' as interval),'yyyy-mm-dd');

	
CREATE TABLE ods.ods_ocs_flowdetail (
_id varchar(50),
accountid varchar(50),
accounttype varchar(50),
flowid varchar(50),
customerid varchar(50),
createdate timestamp,
loaddate timestamp DEFAULT now()
) WITH (appendonly=true, compresslevel=5) DISTRIBUTED BY (_id) PARTITION BY RANGE(createdate)
       (
    PARTITION ods_ocs_flowdetail_p2018before START ('2010-01-01 00:00:00'::timestamp without time zone) END ('2018-09-01 00:00:00'::timestamp without time zone) WITH (tablename='ods_ocs_flowdetail_p2018before', orientation=row ,appendonly=true,compresslevel=5),
	PARTITION ods_ocs_flowdetail_p20180901 START ('2018-09-01 00:00:00'::timestamp	without time zone) END ('2018-09-02 00:00:00'::timestamp without time zone) WITH (tablename='ods_ocs_flowdetail_p20180901', orientation=row ,appendonly=true,compresslevel=5),
	PARTITION ods_ocs_flowdetail_p20180902 START ('2018-09-02 00:00:00'::timestamp	without time zone) END ('2018-09-03 00:00:00'::timestamp without time zone) WITH (tablename='ods_ocs_flowdetail_p20180902', orientation=row ,appendonly=true,compresslevel=5),	
	PARTITION ods_ocs_flowdetail_p20180903 START ('2018-09-03 00:00:00'::timestamp	without time zone) END ('2018-09-04 00:00:00'::timestamp without time zone) WITH (tablename='ods_ocs_flowdetail_p20180903', orientation=row ,appendonly=true,compresslevel=5),	
	PARTITION ods_ocs_flowdetail_p20180904 START ('2018-09-04 00:00:00'::timestamp	without time zone) END ('2018-09-05 00:00:00'::timestamp without time zone) WITH (tablename='ods_ocs_flowdetail_p20180904', orientation=row ,appendonly=true,compresslevel=5),
	PARTITION ods_ocs_flowdetail_p20180905 START ('2018-09-05 00:00:00'::timestamp	without time zone) END ('2018-09-06 00:00:00'::timestamp without time zone) WITH (tablename='ods_ocs_flowdetail_p20180905', orientation=row ,appendonly=true,compresslevel=5),
	PARTITION ods_ocs_flowdetail_p20180906 START ('2018-09-06 00:00:00'::timestamp	without time zone) END ('2018-09-07 00:00:00'::timestamp without time zone) WITH (tablename='ods_ocs_flowdetail_p20180906', orientation=row ,appendonly=true,compresslevel=5)
       );
	   

CREATE TABLE "ods"."ods_oss_system_t_terminal_flow_count_day" (
"_id" varchar(120),
"c_mvnoid" varchar(256),
"c_orgid" varchar(256),
"cardtotal" numeric(32,4),
"counttime" numeric(32,4),
"imei" numeric(32,4),
"imsi" varchar(256),
"iso2" varchar(256),
"t_mvnoid" varchar(256),
"t_orgid" varchar(256),
"total" numeric(32,4),
"u_mvnoid" varchar(256),
"u_orgid" varchar(256),
"usercode" varchar(256),
"usertotal" numeric(32,4),
"loaddate" timestamp DEFAULT now(),
"datetime" date
) WITH (appendonly=true,orientation=COLUMN,compresslevel=5) 
DISTRIBUTED BY (_id) PARTITION BY RANGE(datetime)
(START (DATE '2018-01-01')  INCLUSIVE END (DATE '2020-01-01') EXCLUSIVE EVERY (INTERVAL '7 DAYS'), DEFAULT PARTITION outlying_dates);



CREATE TABLE "dw"."dw_terminal_flow_count_day_lltj" (
"counttime" DATE,
"usercode" varchar(256),
"u_orgid" varchar(256),
"u_mvnoid" varchar(256),
"xq_dingd" varchar(500),
"xq_liul" varchar(500),
"total_level" varchar(500),
"order_lvevl" int4
) WITH (appendonly=true,compresslevel=5) 
DISTRIBUTED BY (counttime) PARTITION BY RANGE(counttime)
(START (DATE '2018-10-01')  INCLUSIVE END (DATE '2020-01-01') EXCLUSIVE EVERY (INTERVAL '1 month'), DEFAULT PARTITION outlying_dates);

 
-- 查看用户和用户的资源队列

SELECT rolname, rsqname FROM pg_roles, gp_toolkit.gp_resqueue_status
WHERE pg_roles.rolresqueue=gp_toolkit.gp_resqueue_status.queueid;
-- 创建资源队列 连接数=3，最大内存使用：1024MB,优先级：低
DROP RESOURCE QUEUE test_queue
create resource queue test_queue with (active_statements=3,MEMORY_LIMIT='1024MB',PRIORITY=LOW)；
-- 创建用户 并指定默认资源队列
CREATE ROLE tuser WITH LOGIN PASSWORD 'tuser' resource queue test_queue;	   
	   
	   
  
gp 的授权是单张表级别的授权，通过脚本生成授权语句方便一些。
-- 生成 授权语句:	   
select 'grant all on SCHEMA ' || tt.autnspname ||  ' to tuser;' as grant_script from gp_toolkit.__gp_user_tables tt -- group by  tt.autnspname -- 给数据库授权
union
select 'grant all on table ' || tt.autnspname || '.' ||tt.autrelname || ' to tuser;' grant_script from gp_toolkit.__gp_user_tables tt;  --给表授权
	   
	      

mongo bss --port 27019 -u xian_query -p DJyBjiyJu2018  --authenticationDatabase=bss --host 10.7.19.25 --eval "db.LimitRuleDetail.stats().count"
mongo 127.0.0.1:27017/test --eval "printjson(db.users.findOne())"


在MySQL配置文件中加上
    group_concat_max_len = 102400 #你要的最大长度
可以简单一点，执行语句,可以设置作用范围
    SET GLOBAL group_concat_max_len=102400;
    SET SESSION group_concat_max_len=102400;
	service mysqld restart
